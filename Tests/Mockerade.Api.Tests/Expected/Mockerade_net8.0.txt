[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/vbreuss/Mockerade.git")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace Mockerade
{
    public static class BaseClass
    {
        public static Mockerade.BaseClass.ConstructorParameters WithConstructorParameters(params object?[]? parameters) { }
        public class ConstructorParameters : System.IEquatable<Mockerade.BaseClass.ConstructorParameters>
        {
            public ConstructorParameters(object?[] Parameters) { }
            public object?[] Parameters { get; init; }
        }
    }
    public interface IMock
    {
        Mockerade.MockBehavior Behavior { get; }
        Mockerade.Checks.IMockInvoked Check { get; }
        Mockerade.Checks.MockInvocations Invocations { get; }
        Mockerade.Events.IMockRaises Raise { get; }
        Mockerade.Setup.IMockSetup Setup { get; }
        Mockerade.Setup.MethodSetupResult Execute(string methodName, params object?[]? parameters);
        Mockerade.Setup.MethodSetupResult<TResult> Execute<TResult>(string methodName, params object?[]? parameters);
        TResult Get<TResult>(string propertyName);
        void Set(string propertyName, object? value);
    }
    public class MockBehavior : System.IEquatable<Mockerade.MockBehavior>
    {
        public MockBehavior() { }
        public Mockerade.MockBehavior.IDefaultValueGenerator DefaultValueGenerator { get; init; }
        public bool ThrowWhenNotSetup { get; init; }
        public static Mockerade.MockBehavior Default { get; }
        public interface IDefaultValueGenerator
        {
            T Generate<T>();
        }
    }
    public abstract class Mock<T> : Mockerade.IMock
    {
        protected Mock(Mockerade.MockBehavior behavior) { }
        public Mockerade.Checks.MockAccessed<T> Accessed { get; }
        public Mockerade.Checks.MockEvent<T> Event { get; }
        public Mockerade.Checks.MockInvoked<T> Invoked { get; }
        public abstract T Object { get; }
        public Mockerade.Events.MockRaises<T> Raise { get; }
        public Mockerade.Setup.MockSetups<T> Setup { get; }
        public static T op_Implicit(Mockerade.Mock<T> mock) { }
    }
    public abstract class Mock<T, T2> : Mockerade.Mock<T>
    {
        protected Mock(Mockerade.MockBehavior behavior) { }
    }
    public class ProtectedMock<T> : Mockerade.IMock
    {
        public ProtectedMock(Mockerade.Mock<T> mock) { }
        public Mockerade.Checks.MockAccessed<T>.Protected Accessed { get; }
        public Mockerade.Checks.MockEvent<T>.Protected Event { get; }
        public Mockerade.Checks.MockInvoked<T>.Protected Invoked { get; }
        public Mockerade.Events.MockRaises<T>.Protected Raise { get; }
        public Mockerade.Setup.MockSetups<T>.Protected Setup { get; }
    }
    public static class ReturnsAsyncExtensions
    {
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> ReturnsAsync<TReturn>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> setup, System.Func<TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> ReturnsAsync<TReturn>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>> setup, TReturn returnValue) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> ReturnsAsync<TReturn, T1>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> setup, System.Func<TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> ReturnsAsync<TReturn, T1>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> setup, System.Func<T1, TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> ReturnsAsync<TReturn, T1>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1> setup, TReturn returnValue) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> ReturnsAsync<TReturn, T1, T2>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> setup, System.Func<TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> ReturnsAsync<TReturn, T1, T2>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> setup, System.Func<T1, T2, TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> ReturnsAsync<TReturn, T1, T2>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2> setup, TReturn returnValue) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> ReturnsAsync<TReturn, T1, T2, T3>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> setup, System.Func<TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> ReturnsAsync<TReturn, T1, T2, T3>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> setup, System.Func<T1, T2, T3, TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> ReturnsAsync<TReturn, T1, T2, T3>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3> setup, TReturn returnValue) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> ReturnsAsync<TReturn, T1, T2, T3, T4>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> setup, System.Func<TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> ReturnsAsync<TReturn, T1, T2, T3, T4>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> setup, System.Func<T1, T2, T3, T4, TReturn> callback) { }
        public static Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> ReturnsAsync<TReturn, T1, T2, T3, T4>(this Mockerade.Setup.ReturnMethodSetup<System.Threading.Tasks.Task<TReturn>, T1, T2, T3, T4> setup, TReturn returnValue) { }
    }
    public static class With
    {
        public static Mockerade.With.Parameter<T> Any<T>() { }
        public static Mockerade.With.Parameter<T> Matching<T>(System.Func<T, bool> predicate) { }
        public static Mockerade.With.InvokedOutParameter<T> Out<T>() { }
        public static Mockerade.With.OutParameter<T> Out<T>(System.Func<T> setter) { }
        public static Mockerade.With.InvokedRefParameter<T> Ref<T>() { }
        public static Mockerade.With.RefParameter<T> Ref<T>(System.Func<T, T> setter) { }
        public static Mockerade.With.RefParameter<T> Ref<T>(System.Func<T, bool> predicate, System.Func<T, T> setter) { }
        public class InvokedOutParameter<T> : Mockerade.With.Parameter
        {
            public InvokedOutParameter() { }
            public override bool Matches(object? value) { }
        }
        public class InvokedRefParameter<T> : Mockerade.With.Parameter
        {
            public InvokedRefParameter() { }
            public override bool Matches(object? value) { }
        }
        public class NamedParameter : System.IEquatable<Mockerade.With.NamedParameter>
        {
            public NamedParameter(string Name, Mockerade.With.Parameter Parameter) { }
            public string Name { get; init; }
            public Mockerade.With.Parameter Parameter { get; init; }
        }
        public class OutParameter<T> : Mockerade.With.Parameter
        {
            public OutParameter(System.Func<T> setter) { }
            public T GetValue() { }
            public override bool Matches(object? value) { }
        }
        public abstract class Parameter
        {
            protected Parameter() { }
            public abstract bool Matches(object? value);
        }
        public abstract class Parameter<T> : Mockerade.With.Parameter
        {
            protected Parameter() { }
            protected abstract bool Matches(T value);
            public override bool Matches(object? value) { }
            public static Mockerade.With.Parameter<T> op_Implicit(T value) { }
        }
        public class RefParameter<T> : Mockerade.With.Parameter
        {
            public RefParameter(System.Func<T, bool> predicate, System.Func<T, T> setter) { }
            public T GetValue(T value) { }
            public override bool Matches(object? value) { }
        }
    }
}
namespace Mockerade.Checks
{
    public class CheckResult : Mockerade.Checks.ICheckResult
    {
        public CheckResult(Mockerade.Checks.Invocation[] invocations) { }
        public bool AtLeast(int times) { }
        public bool AtLeastOnce() { }
        public bool AtMost(int times) { }
        public bool AtMostOnce() { }
        public bool Exactly(int times) { }
        public bool Never() { }
        public bool Once() { }
        public class Event<T>
        {
            public Event(Mockerade.Checks.IMockEvent mockEvent, string eventName) { }
            public Mockerade.Checks.CheckResult Subscribed() { }
            public Mockerade.Checks.CheckResult Unsubscribed() { }
        }
        public class Property<T>
        {
            public Property(Mockerade.Checks.IMockAccessed mockAccessed, string propertyName) { }
            public Mockerade.Checks.CheckResult Getter() { }
            public Mockerade.Checks.CheckResult Setter(Mockerade.With.Parameter<T> value) { }
        }
    }
    public class EventSubscription : Mockerade.Checks.Invocation
    {
        public EventSubscription(string name, object? target, System.Reflection.MethodInfo method) { }
        public System.Reflection.MethodInfo Method { get; }
        public string Name { get; }
        public object? Target { get; }
    }
    public class EventUnsubscription : Mockerade.Checks.Invocation
    {
        public EventUnsubscription(string name, object? target, System.Reflection.MethodInfo method) { }
        public System.Reflection.MethodInfo Method { get; }
        public string Name { get; }
        public object? Target { get; }
    }
    public interface ICheckResult
    {
        Mockerade.Checks.Invocation[] Invocations { get; }
    }
    public interface IMockAccessed
    {
        Mockerade.Checks.Invocation[] PropertyGetter(string propertyName);
        Mockerade.Checks.Invocation[] PropertySetter(string propertyName, Mockerade.With.Parameter value);
    }
    public interface IMockEvent
    {
        Mockerade.Checks.Invocation[] Subscribed(string eventName);
        Mockerade.Checks.Invocation[] Unsubscribed(string eventName);
    }
    public interface IMockInvoked
    {
        Mockerade.Checks.Invocation[] Method(string methodName, params Mockerade.With.Parameter[] parameters);
    }
    public class Invocation
    {
        public Invocation() { }
    }
    public class MethodInvocation : Mockerade.Checks.Invocation
    {
        public MethodInvocation(string name, object?[] parameters) { }
        public string Name { get; }
        public object?[] Parameters { get; }
    }
    public class MockAccessed<T> : Mockerade.Checks.IMockAccessed
    {
        public MockAccessed(Mockerade.Checks.MockInvocations invocations) { }
        public class Protected : Mockerade.Checks.MockAccessed<T>, Mockerade.Checks.IMockAccessed
        {
            public Protected(Mockerade.Checks.IMockAccessed inner, Mockerade.Checks.MockInvocations invocations) { }
        }
        public class Proxy : Mockerade.Checks.MockAccessed<T>, Mockerade.Checks.IMockAccessed
        {
            public Proxy(Mockerade.Checks.IMockAccessed inner, Mockerade.Checks.MockInvocations invocations) { }
        }
    }
    public class MockEvent<T> : Mockerade.Checks.IMockEvent
    {
        public MockEvent(Mockerade.Checks.MockInvocations invocations) { }
        public class Protected : Mockerade.Checks.MockEvent<T>, Mockerade.Checks.IMockEvent
        {
            public Protected(Mockerade.Checks.IMockEvent inner, Mockerade.Checks.MockInvocations invocations) { }
        }
        public class Proxy : Mockerade.Checks.MockEvent<T>, Mockerade.Checks.IMockEvent
        {
            public Proxy(Mockerade.Checks.IMockEvent inner, Mockerade.Checks.MockInvocations invocations) { }
        }
    }
    public class MockInvocations
    {
        public MockInvocations() { }
        public System.Collections.Generic.IReadOnlyList<Mockerade.Checks.Invocation> Invocations { get; }
        public bool IsAlreadyInvoked { get; }
    }
    public class MockInvoked<T> : Mockerade.Checks.IMockInvoked
    {
        public MockInvoked(Mockerade.Checks.MockInvocations invocations) { }
        public class Protected : Mockerade.Checks.MockInvoked<T>, Mockerade.Checks.IMockInvoked
        {
            public Protected(Mockerade.Checks.IMockInvoked inner, Mockerade.Checks.MockInvocations invocations) { }
        }
        public class Proxy : Mockerade.Checks.MockInvoked<T>, Mockerade.Checks.IMockInvoked
        {
            public Proxy(Mockerade.Checks.IMockInvoked inner, Mockerade.Checks.MockInvocations invocations) { }
        }
    }
    public class PropertyGetterInvocation : Mockerade.Checks.Invocation
    {
        public PropertyGetterInvocation(string propertyName) { }
        public string Name { get; }
    }
    public class PropertySetterInvocation : Mockerade.Checks.Invocation
    {
        public PropertySetterInvocation(string propertyName, object? value) { }
        public string Name { get; }
        public object? Value { get; }
    }
}
namespace Mockerade.Events
{
    public interface IMockRaises
    {
        void AddEvent(string name, object? target, System.Reflection.MethodInfo? method);
        void Raise(string eventName, params object?[] parameters);
        void RemoveEvent(string name, object? target, System.Reflection.MethodInfo? method);
    }
    public class MockRaises<T> : Mockerade.Events.IMockRaises
    {
        public MockRaises(Mockerade.Setup.IMockSetup setup, Mockerade.Checks.MockInvocations invocations) { }
        public class Protected : Mockerade.Events.MockRaises<T>, Mockerade.Events.IMockRaises
        {
            public Protected(Mockerade.Events.IMockRaises inner, Mockerade.Setup.IMockSetup setup, Mockerade.Checks.MockInvocations invocations) { }
        }
    }
}
namespace Mockerade.Exceptions
{
    public class MockException : System.Exception
    {
        public MockException(string message) { }
        public MockException(string message, System.Exception innerException) { }
    }
    public class MockNotSetupException : Mockerade.Exceptions.MockException
    {
        public MockNotSetupException(string message) { }
        public MockNotSetupException(string message, System.Exception innerException) { }
    }
}
namespace Mockerade.Setup
{
    public interface IMethodSetup
    {
        int InvocationCount { get; }
        bool Matches(Mockerade.Checks.Invocation invocation);
        T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior);
        T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior);
    }
    public interface IMockSetup
    {
        Mockerade.IMock Mock { get; }
        void AddEvent(string eventName, object? target, System.Reflection.MethodInfo method);
        System.Collections.Generic.IEnumerable<System.ValueTuple<object?, System.Reflection.MethodInfo>> GetEventHandlers(string eventName);
        void RegisterMethod(Mockerade.Setup.MethodSetup methodSetup);
        void RegisterProperty(string propertyName, Mockerade.Setup.PropertySetup propertySetup);
        void RemoveEvent(string eventName, object? target, System.Reflection.MethodInfo method);
    }
    public abstract class MethodSetup : Mockerade.Setup.IMethodSetup
    {
        protected MethodSetup() { }
        protected abstract void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior);
        protected abstract TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior);
        protected abstract bool IsMatch(Mockerade.Checks.MethodInvocation invocation);
        protected abstract T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior);
        protected abstract T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior);
        protected static bool HasOutParameter<T>(Mockerade.With.NamedParameter[] namedParameters, string parameterName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Mockerade.With.OutParameter<T>? parameter) { }
        protected static bool HasRefParameter<T>(Mockerade.With.NamedParameter[] namedParameters, string parameterName, [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out Mockerade.With.RefParameter<T>? parameter) { }
        protected static bool Matches(Mockerade.With.NamedParameter[] namedParameters, object?[] values) { }
        protected static bool TryCast<T>(object? value, out T result, Mockerade.MockBehavior behavior) { }
    }
    public class MethodSetupResult
    {
        public MethodSetupResult(Mockerade.Setup.IMethodSetup? setup, Mockerade.MockBehavior behavior) { }
        public T SetOutParameter<T>(string parameterName) { }
        public T SetRefParameter<T>(string parameterName, T value) { }
    }
    public class MethodSetupResult<TResult> : Mockerade.Setup.MethodSetupResult
    {
        public MethodSetupResult(Mockerade.Setup.IMethodSetup? setup, Mockerade.MockBehavior behavior, TResult result) { }
        public TResult Result { get; }
    }
    public class MockSetups<T> : Mockerade.Setup.IMockSetup
    {
        public MockSetups(Mockerade.IMock mock) { }
        public class Protected : Mockerade.Setup.MockSetups<T>, Mockerade.Setup.IMockSetup
        {
            public Protected(Mockerade.Setup.IMockSetup inner) { }
        }
        public class Proxy : Mockerade.Setup.MockSetups<T>, Mockerade.Setup.IMockSetup
        {
            public Proxy(Mockerade.Setup.IMockSetup inner) { }
        }
    }
    public abstract class PropertySetup
    {
        protected PropertySetup() { }
        public int GetterInvocationCount { get; }
        public int SetterInvocationCount { get; }
        protected abstract TResult InvokeGetter<TResult>();
        protected abstract void InvokeSetter(object? value);
    }
    public class PropertySetup<T> : Mockerade.Setup.PropertySetup
    {
        public PropertySetup() { }
        public Mockerade.Setup.PropertySetup<T> InitializeWith(T value) { }
        protected override TResult InvokeGetter<TResult>() { }
        protected override void InvokeSetter(object? value) { }
        public Mockerade.Setup.PropertySetup<T> OnGet(System.Action callback) { }
        public Mockerade.Setup.PropertySetup<T> OnSet(System.Action<T> callback) { }
    }
    public class ReturnMethodSetup<TReturn> : Mockerade.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn> Callback(System.Action callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn> Returns(System.Func<TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class ReturnMethodSetup<TReturn, T1> : Mockerade.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockerade.With.NamedParameter match1) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1> Callback(System.Action callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1> Callback(System.Action<T1> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1> Returns(System.Func<TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1> Returns(System.Func<T1, TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class ReturnMethodSetup<TReturn, T1, T2> : Mockerade.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockerade.With.NamedParameter match1, Mockerade.With.NamedParameter match2) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2> Callback(System.Action callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2> Callback(System.Action<T1, T2> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2> Returns(System.Func<TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2> Returns(System.Func<T1, T2, TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class ReturnMethodSetup<TReturn, T1, T2, T3> : Mockerade.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockerade.With.NamedParameter match1, Mockerade.With.NamedParameter match2, Mockerade.With.NamedParameter match3) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Callback(System.Action callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Callback(System.Action<T1, T2, T3> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Returns(System.Func<TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Returns(System.Func<T1, T2, T3, TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class ReturnMethodSetup<TReturn, T1, T2, T3, T4> : Mockerade.Setup.MethodSetup
    {
        public ReturnMethodSetup(string name, Mockerade.With.NamedParameter match1, Mockerade.With.NamedParameter match2, Mockerade.With.NamedParameter match3, Mockerade.With.NamedParameter match4) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Callback(System.Action callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Callback(System.Action<T1, T2, T3, T4> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Returns(System.Func<TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Returns(System.Func<T1, T2, T3, T4, TReturn> callback) { }
        public Mockerade.Setup.ReturnMethodSetup<TReturn, T1, T2, T3, T4> Returns(TReturn returnValue) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class VoidMethodSetup : Mockerade.Setup.MethodSetup
    {
        public VoidMethodSetup(string name) { }
        public Mockerade.Setup.VoidMethodSetup Callback(System.Action callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class VoidMethodSetup<T1> : Mockerade.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockerade.With.NamedParameter match1) { }
        public Mockerade.Setup.VoidMethodSetup<T1> Callback(System.Action callback) { }
        public Mockerade.Setup.VoidMethodSetup<T1> Callback(System.Action<T1> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class VoidMethodSetup<T1, T2> : Mockerade.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockerade.With.NamedParameter match1, Mockerade.With.NamedParameter match2) { }
        public Mockerade.Setup.VoidMethodSetup<T1, T2> Callback(System.Action callback) { }
        public Mockerade.Setup.VoidMethodSetup<T1, T2> Callback(System.Action<T1, T2> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class VoidMethodSetup<T1, T2, T3> : Mockerade.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockerade.With.NamedParameter match1, Mockerade.With.NamedParameter match2, Mockerade.With.NamedParameter match3) { }
        public Mockerade.Setup.VoidMethodSetup<T1, T2, T3> Callback(System.Action callback) { }
        public Mockerade.Setup.VoidMethodSetup<T1, T2, T3> Callback(System.Action<T1, T2, T3> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
    public class VoidMethodSetup<T1, T2, T3, T4> : Mockerade.Setup.MethodSetup
    {
        public VoidMethodSetup(string name, Mockerade.With.NamedParameter match1, Mockerade.With.NamedParameter match2, Mockerade.With.NamedParameter match3, Mockerade.With.NamedParameter match4) { }
        public Mockerade.Setup.VoidMethodSetup<T1, T2, T3, T4> Callback(System.Action callback) { }
        public Mockerade.Setup.VoidMethodSetup<T1, T2, T3, T4> Callback(System.Action<T1, T2, T3, T4> callback) { }
        protected override void ExecuteCallback(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override TResult GetReturnValue<TResult>(Mockerade.Checks.MethodInvocation invocation, Mockerade.MockBehavior behavior) { }
        protected override bool IsMatch(Mockerade.Checks.MethodInvocation invocation) { }
        protected override T SetOutParameter<T>(string parameterName, Mockerade.MockBehavior behavior) { }
        protected override T SetRefParameter<T>(string parameterName, T value, Mockerade.MockBehavior behavior) { }
    }
}